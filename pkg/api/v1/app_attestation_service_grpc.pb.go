// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: app_attestation_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppAttestationService_VerifyIosAttestation_FullMethodName     = "/attestation.service.v1.AppAttestationService/VerifyIosAttestation"
	AppAttestationService_VerifyAndroidAttestation_FullMethodName = "/attestation.service.v1.AppAttestationService/VerifyAndroidAttestation"
)

// AppAttestationServiceClient is the client API for AppAttestationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppAttestationServiceClient interface {
	VerifyIosAttestation(ctx context.Context, in *IosAttestationRequest, opts ...grpc.CallOption) (*AttestationResponse, error)
	VerifyAndroidAttestation(ctx context.Context, in *AndroidAttestationRequest, opts ...grpc.CallOption) (*AttestationResponse, error)
}

type appAttestationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppAttestationServiceClient(cc grpc.ClientConnInterface) AppAttestationServiceClient {
	return &appAttestationServiceClient{cc}
}

func (c *appAttestationServiceClient) VerifyIosAttestation(ctx context.Context, in *IosAttestationRequest, opts ...grpc.CallOption) (*AttestationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttestationResponse)
	err := c.cc.Invoke(ctx, AppAttestationService_VerifyIosAttestation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAttestationServiceClient) VerifyAndroidAttestation(ctx context.Context, in *AndroidAttestationRequest, opts ...grpc.CallOption) (*AttestationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttestationResponse)
	err := c.cc.Invoke(ctx, AppAttestationService_VerifyAndroidAttestation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppAttestationServiceServer is the server API for AppAttestationService service.
// All implementations must embed UnimplementedAppAttestationServiceServer
// for forward compatibility.
type AppAttestationServiceServer interface {
	VerifyIosAttestation(context.Context, *IosAttestationRequest) (*AttestationResponse, error)
	VerifyAndroidAttestation(context.Context, *AndroidAttestationRequest) (*AttestationResponse, error)
	mustEmbedUnimplementedAppAttestationServiceServer()
}

// UnimplementedAppAttestationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppAttestationServiceServer struct{}

func (UnimplementedAppAttestationServiceServer) VerifyIosAttestation(context.Context, *IosAttestationRequest) (*AttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyIosAttestation not implemented")
}
func (UnimplementedAppAttestationServiceServer) VerifyAndroidAttestation(context.Context, *AndroidAttestationRequest) (*AttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAndroidAttestation not implemented")
}
func (UnimplementedAppAttestationServiceServer) mustEmbedUnimplementedAppAttestationServiceServer() {}
func (UnimplementedAppAttestationServiceServer) testEmbeddedByValue()                               {}

// UnsafeAppAttestationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppAttestationServiceServer will
// result in compilation errors.
type UnsafeAppAttestationServiceServer interface {
	mustEmbedUnimplementedAppAttestationServiceServer()
}

func RegisterAppAttestationServiceServer(s grpc.ServiceRegistrar, srv AppAttestationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppAttestationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppAttestationService_ServiceDesc, srv)
}

func _AppAttestationService_VerifyIosAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IosAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAttestationServiceServer).VerifyIosAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAttestationService_VerifyIosAttestation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAttestationServiceServer).VerifyIosAttestation(ctx, req.(*IosAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAttestationService_VerifyAndroidAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AndroidAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAttestationServiceServer).VerifyAndroidAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAttestationService_VerifyAndroidAttestation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAttestationServiceServer).VerifyAndroidAttestation(ctx, req.(*AndroidAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppAttestationService_ServiceDesc is the grpc.ServiceDesc for AppAttestationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppAttestationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attestation.service.v1.AppAttestationService",
	HandlerType: (*AppAttestationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyIosAttestation",
			Handler:    _AppAttestationService_VerifyIosAttestation_Handler,
		},
		{
			MethodName: "VerifyAndroidAttestation",
			Handler:    _AppAttestationService_VerifyAndroidAttestation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_attestation_service.proto",
}
